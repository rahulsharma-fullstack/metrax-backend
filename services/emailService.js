const nodemailer = require('nodemailer');
const handlebars = require('handlebars');
const fs = require('fs').promises;
const path = require('path');
const config = require('../config/config');
const logger = require('../utils/logger');

class EmailService {
  constructor() {
    this.transporter = nodemailer.createTransport({
      host: config.email.host,
      port: config.email.port,
      secure: config.email.port === 465,
      auth: {
        user: config.email.auth.user,
        pass: config.email.auth.pass,
      },
    });

    // Verify connection configuration
    this.verifyConnection();
  }

  // Verify email connection
  async verifyConnection() {
    try {
      await this.transporter.verify();
      logger.info('Email service connected successfully');
    } catch (error) {
      logger.error('Email service connection failed', {
        error: error.message,
      });
    }
  }

  // Load email template
  async loadTemplate(templateName) {
    try {
      const templatePath = path.join(__dirname, '../templates/emails', `${templateName}.hbs`);
      const templateContent = await fs.readFile(templatePath, 'utf8');
      return handlebars.compile(templateContent);
    } catch (error) {
      logger.error('Error loading email template', {
        error: error.message,
        templateName,
      });
      throw new Error(`Template ${templateName} not found`);
    }
  }

  // Send donation confirmation email
  async sendDonationConfirmation(donationData) {
    try {
      const template = await this.loadTemplate('donation-confirmation');
      const html = template({
        donorName: donationData.anonymous ? 'Anonymous Donor' : donationData.donorName,
        amount: this.formatCurrency(donationData.amount),
        projectTitle: donationData.projectTitle,
        donationDate: new Date().toLocaleDateString(),
        donationId: donationData.paymentIntentId,
        message: donationData.message,
        anonymous: donationData.anonymous,
        receiptUrl: `${config.frontendUrl}/receipt/${donationData.paymentIntentId}`,
        organizationName: 'Metrax',
        organizationEmail: config.email.from,
        organizationWebsite: config.frontendUrl,
      });

      const mailOptions = {
        from: `"${config.email.from}" <${config.email.auth.user}>`,
        to: donationData.donorEmail,
        subject: `Thank you for your donation to ${donationData.projectTitle}`,
        html,
        attachments: [
          {
            filename: `receipt-${donationData.paymentIntentId}.pdf`,
            path: donationData.receiptPath, // Will be generated by receipt service
            contentType: 'application/pdf',
          },
        ],
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      logger.info('Donation confirmation email sent successfully', {
        messageId: result.messageId,
        to: donationData.donorEmail,
        donationId: donationData.paymentIntentId,
      });

      return result;
    } catch (error) {
      logger.error('Error sending donation confirmation email', {
        error: error.message,
        donationData: {
          donorEmail: donationData.donorEmail,
          paymentIntentId: donationData.paymentIntentId,
        },
      });
      throw new Error('Failed to send confirmation email');
    }
  }

  // Send admin notification email
  async sendAdminNotification(donationData) {
    try {
      const template = await this.loadTemplate('admin-notification');
      const html = template({
        donorName: donationData.anonymous ? 'Anonymous Donor' : donationData.donorName,
        donorEmail: donationData.donorEmail,
        amount: this.formatCurrency(donationData.amount),
        projectTitle: donationData.projectTitle,
        donationDate: new Date().toLocaleDateString(),
        donationId: donationData.paymentIntentId,
        message: donationData.message,
        anonymous: donationData.anonymous,
        adminDashboardUrl: `${config.frontendUrl}/admin/donations`,
      });

      const mailOptions = {
        from: `"${config.email.from}" <${config.email.auth.user}>`,
        to: config.email.from, // Send to admin email
        subject: `New donation received: $${donationData.amount} to ${donationData.projectTitle}`,
        html,
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      logger.info('Admin notification email sent successfully', {
        messageId: result.messageId,
        donationId: donationData.paymentIntentId,
      });

      return result;
    } catch (error) {
      logger.error('Error sending admin notification email', {
        error: error.message,
        donationData: {
          paymentIntentId: donationData.paymentIntentId,
        },
      });
      throw new Error('Failed to send admin notification');
    }
  }

  // Send refund notification email
  async sendRefundNotification(refundData) {
    try {
      const template = await this.loadTemplate('refund-notification');
      const html = template({
        donorName: refundData.donorName,
        donorEmail: refundData.donorEmail,
        originalAmount: this.formatCurrency(refundData.originalAmount),
        refundAmount: this.formatCurrency(refundData.refundAmount),
        projectTitle: refundData.projectTitle,
        refundDate: new Date().toLocaleDateString(),
        refundId: refundData.refundId,
        reason: refundData.reason,
        organizationName: 'Metrax',
        organizationEmail: config.email.from,
      });

      const mailOptions = {
        from: `"${config.email.from}" <${config.email.auth.user}>`,
        to: refundData.donorEmail,
        subject: `Refund processed for your donation to ${refundData.projectTitle}`,
        html,
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      logger.info('Refund notification email sent successfully', {
        messageId: result.messageId,
        to: refundData.donorEmail,
        refundId: refundData.refundId,
      });

      return result;
    } catch (error) {
      logger.error('Error sending refund notification email', {
        error: error.message,
        refundData: {
          donorEmail: refundData.donorEmail,
          refundId: refundData.refundId,
        },
      });
      throw new Error('Failed to send refund notification');
    }
  }

  // Send payment failure notification
  async sendPaymentFailureNotification(donationData, errorMessage) {
    try {
      const template = await this.loadTemplate('payment-failure');
      const html = template({
        donorName: donationData.anonymous ? 'Anonymous Donor' : donationData.donorName,
        donorEmail: donationData.donorEmail,
        amount: this.formatCurrency(donationData.amount),
        projectTitle: donationData.projectTitle,
        errorMessage,
        retryUrl: `${config.frontendUrl}/donate?project=${donationData.projectId}`,
        organizationName: 'Metrax',
        organizationEmail: config.email.from,
        organizationWebsite: config.frontendUrl,
      });

      const mailOptions = {
        from: `"${config.email.from}" <${config.email.auth.user}>`,
        to: donationData.donorEmail,
        subject: `Payment failed for your donation to ${donationData.projectTitle}`,
        html,
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      logger.info('Payment failure notification email sent successfully', {
        messageId: result.messageId,
        to: donationData.donorEmail,
        paymentIntentId: donationData.paymentIntentId,
      });

      return result;
    } catch (error) {
      logger.error('Error sending payment failure notification email', {
        error: error.message,
        donationData: {
          donorEmail: donationData.donorEmail,
          paymentIntentId: donationData.paymentIntentId,
        },
      });
      throw new Error('Failed to send payment failure notification');
    }
  }

  // Send monthly donation summary
  async sendMonthlySummary(donorEmail, summaryData) {
    try {
      const template = await this.loadTemplate('monthly-summary');
      const html = template({
        donorName: summaryData.donorName,
        totalDonations: summaryData.totalDonations,
        totalAmount: this.formatCurrency(summaryData.totalAmount),
        projectsSupported: summaryData.projectsSupported,
        month: summaryData.month,
        year: summaryData.year,
        donations: summaryData.donations.map(donation => ({
          ...donation,
          amount: this.formatCurrency(donation.amount),
          date: new Date(donation.date).toLocaleDateString(),
        })),
        organizationName: 'Metrax',
        organizationEmail: config.email.from,
        organizationWebsite: config.frontendUrl,
      });

      const mailOptions = {
        from: `"${config.email.from}" <${config.email.auth.user}>`,
        to: donorEmail,
        subject: `Your ${summaryData.month} ${summaryData.year} donation summary`,
        html,
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      logger.info('Monthly summary email sent successfully', {
        messageId: result.messageId,
        to: donorEmail,
        month: summaryData.month,
        year: summaryData.year,
      });

      return result;
    } catch (error) {
      logger.error('Error sending monthly summary email', {
        error: error.message,
        donorEmail,
        month: summaryData.month,
        year: summaryData.year,
      });
      throw new Error('Failed to send monthly summary');
    }
  }

  // Send project update notification
  async sendProjectUpdate(projectData, donors) {
    try {
      const template = await this.loadTemplate('project-update');
      
      for (const donor of donors) {
        const html = template({
          donorName: donor.name,
          projectTitle: projectData.title,
          projectUpdate: projectData.update,
          currentProgress: projectData.currentProgress,
          goalAmount: this.formatCurrency(projectData.goalAmount),
          raisedAmount: this.formatCurrency(projectData.raisedAmount),
          updateDate: new Date().toLocaleDateString(),
          projectUrl: `${config.frontendUrl}/projects/${projectData.id}`,
          organizationName: 'Metrax',
          organizationEmail: config.email.from,
        });

        const mailOptions = {
          from: `"${config.email.from}" <${config.email.auth.user}>`,
          to: donor.email,
          subject: `Update on ${projectData.title}`,
          html,
        };

        await this.transporter.sendMail(mailOptions);
        
        logger.info('Project update email sent successfully', {
          to: donor.email,
          projectId: projectData.id,
        });
      }
    } catch (error) {
      logger.error('Error sending project update emails', {
        error: error.message,
        projectId: projectData.id,
      });
      throw new Error('Failed to send project update notifications');
    }
  }

  // Format currency
  formatCurrency(amount) {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
    }).format(amount);
  }

  // Test email service
  async testEmail(to) {
    try {
      const mailOptions = {
        from: `"${config.email.from}" <${config.email.auth.user}>`,
        to,
        subject: 'Test email from Metrax donation system',
        html: `
          <h1>Test Email</h1>
          <p>This is a test email to verify the email service is working correctly.</p>
          <p>Sent at: ${new Date().toLocaleString()}</p>
        `,
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      logger.info('Test email sent successfully', {
        messageId: result.messageId,
        to,
      });

      return result;
    } catch (error) {
      logger.error('Error sending test email', {
        error: error.message,
        to,
      });
      throw new Error('Failed to send test email');
    }
  }
}

module.exports = new EmailService();